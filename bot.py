#!/usr/bin/python3
import TelegramAPI
import sys
import json
import time
import threading
import Bartender
from context import Context



commands_list = {
                    "start": "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç-–±–æ—Ç–æ–º –∏ –ø–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏",
                    "help": "–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏",
                    "bar": "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–∞—Ä",
                    "settings": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç-–±–æ—Ç–∞"
                }

with open("static/pages.json") as static_data:
    pages = json.loads(static_data.read())


bot = TelegramAPI.Bot(token_file = "token.txt")
bot.setCommandsList(commands_list)

bartender = Bartender.BarTender()
bartender.setPath("/home/exesa_ligno/Documents/Study/Programming/Mipt/4sem/BartenderBot")
bartender.loadReceipes()
bartender.loadBars()


@bot.message_handler()
def handler(message):
    if message.text.startswith("/"):
        command_processor(message)
    else:
        search_processor(message)


@bot.callback_handler()
def callback_handler(callback):

    answer = "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"

    c = Context.getContext(callback.message)

    if c == None:
        callback.answer("–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–∏–∑–¥–µ—Ü–∞", show_alert = True)
        callback.message.delete()
        return

    if callback.data == "back":
        c.back()

    elif callback.data == "close":
        c.close()
        callback.message.delete()
        return

    elif callback.data == "prev":
        context = c.getPageInfo().split(":")
        context[1] = str(int(context[1]) - 1)
        c.context = ""
        c.addContext(":".join(context))

    elif callback.data == "change_pages_ignore":
        callback.answer("–õ–∏—Å—Ç–∞—Ç—å –¥–∞–ª—å—à–µ –Ω–µ–∫—É–¥–∞")
        return

    elif callback.data == "next":
        context = c.getPageInfo().split(":")
        c.context = ""
        context[1] = str(int(context[1]) + 1)
        c.addContext(":".join(context))

    elif callback.data == "update_shoplist":
        bar = bartender.getBar(callback.chat_id)
        context = Context.getContext(callback.message)
        cocktail_id = int(context.getPageInfo().split(":").pop())
        cocktail = bartender.getCocktail(cocktail_id)
        bar.addMissingToShoplist(cocktail)
        answer = "–ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à —à–æ–ø–ª–∏—Å—Ç"

    elif callback.data == "update_barlist":
        bar = bartender.getBar(callback.chat_id)
        context = Context.getContext(callback.message)
        cocktail_id = int(context.getPageInfo().split(":").pop())
        cocktail = bartender.getCocktail(cocktail_id)
        bar.addMissingToBar(cocktail)
        answer = "–ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à –±–∞—Ä"

    else:
        c.addContext(callback.data)

    text = getPageText(c.getPageInfo(), callback.chat_id)
    keyboard = getPageKeyboard(c.getPageInfo(), callback.chat_id)

    sended = callback.message.edit(text, reply_markup = keyboard)

    callback.answer(answer)

    #print(sended)


def command_processor(message):
    command = message.text[1::]

    text = getPageText(command, message.chat_id)
    keyboard = getPageKeyboard(command, message.chat_id)

    sended = message.answer(text, reply_markup = keyboard)

    c = Context(sended)
    c.addContext(command)

    message.delete()


def search_processor(message):
    search_results = message.answer("–û–∫–µ–π, –∏—â—É –∫–æ–∫—Ç–µ–π–ª—å *" + message.text + "*")

    c = Context(search_results)
    c.addContext("search:1:" + message.text)

    text = getPageText(c.getPageInfo(), message.chat_id)
    keyboard = getPageKeyboard(c.getPageInfo(), message.chat_id)

    search_results.edit(text, reply_markup = keyboard)

    message.delete()


def getPageText(context, id):
    if context in pages:
        return pages[context]["text"]

    elif context.startswith("search"):
        pages_count = lambda x: x // 7 + (0 if x % 7 == 0 else 1)
        splitted = context.split(":")
        request = splitted.pop()
        page = splitted.pop()
        results_count = len(bartender.search(request))
        text = ""
        if results_count != 0:
            text += "–í–æ—Ç, —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É *" + request + "*"
            if pages_count(results_count) > 1:
                text += "\n`–°—Ç—Ä–∞–Ω–∏—Ü–∞ {} –∏–∑ {}`".format(page, pages_count(results_count))
        else:
            text += "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –∑–∞–ø—Ä–æ—Å—É *" + request + "* –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏"

        return text

    elif context.startswith("cocktail"):
        bar = bartender.getBar(id)

        cocktail_id = int(context.split(":").pop())

        text = "–í–æ—Ç —Ä–µ—Ü–µ–ø—Ç –∫–æ–∫—Ç–µ–π–ª—è *" + bartender.getCocktail(cocktail_id).name + "*\n\n–î–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è:\n"
        missing_count = 0
        for ingredient in bartender.getCocktail(cocktail_id).ingredients:
            if ingredient in bar.bar_list:
                text += "  ‚ñ£ "
            else:
                text += "  ‚ñ° "
                missing_count += 1
            text += "_" + ingredient + "_\n"

        text += "\n"
        text += bartender.getCocktail(cocktail_id).receipe

        if missing_count != 0:
            text += "\n\n`–ù–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–∫—Ç–µ–π–ª—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ —à–æ–ø–ª–∏—Å—Ç, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ`\n"
        else:
            text += "\n\n`–£ –≤–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞!`\n"

        return text

    else:
        return "–ß–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"


def getPageKeyboard(context, id):
    if context in pages:
        return pages[context]["keyboard"]

    elif context.startswith("search"):
        pages_count = lambda x: x // 7 + (0 if x % 7 == 0 else 1)
        splitted = context.split(":")
        request = splitted.pop()
        page = int(splitted.pop())
        results = bartender.search(request)
        keyboard = [[{"text": bartender.getCocktail(id).name, "callback_data": "cocktail:" + str(id)}] for id in results[7 * (page - 1) : 7 * page]]
        if pages_count(len(results)) > 1:
            if page == 1:
                page_change_buttons = [{"text": "üö´", "callback_data": "change_pages_ignore"}, {"text": ">>", "callback_data": "next"}]
            elif page == pages_count(len(results)):
                page_change_buttons = [{"text": "<<", "callback_data": "prev"}, {"text": "üö´", "callback_data": "change_pages_ignore"}]
            else:
                page_change_buttons = [{"text": "<<", "callback_data": "prev"}, {"text": ">>", "callback_data": "next"}]
            keyboard += [page_change_buttons]
        keyboard += [[{"text": "–ó–∞–∫—Ä—ã—Ç—å", "callback_data": "close"}]]

        return keyboard

    elif context.startswith("cocktail"):
        bar = bartender.getBar(id)

        cocktail_id = int(context.split(":").pop())

        missing_count = 0
        for ingredient in bartender.getCocktail(cocktail_id).ingredients:
            if ingredient not in bar.bar_list:
                missing_count += 1

        keyboard = []

        keyboard += [[{"text": "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", "callback_data": "add_favourites"}]]

        if missing_count != 0:
            keyboard += [[{"text": "–î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ –≤ —à–æ–ø–ª–∏—Å—Ç", "callback_data": "update_shoplist"}],
                            [{"text": "–£ –º–µ–Ω—è –µ—Å—Ç—å –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", "callback_data": "update_barlist"}]]

        keyboard += [[{"text": "‚¨ÖÔ∏è –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞", "callback_data": "back"}]]

        return keyboard

    else:
        return [[{"text": "–ó–∞–∫—Ä—ã—Ç—å", "callback_data": "close"}]]



if __name__ == "__main__":
    polling_thread = threading.Thread(target = bot.polling, daemon = True)
    polling_thread.start()

    while True:
        pass
